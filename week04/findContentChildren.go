/*
贪心规律:
某个饼干如果不能满足某个孩子，则该饼干也一定不能满足需求因子更大的孩子
某个孩子可以用更小的饼干满足，则没必要用更大饼干满足，因为可以保留更大的饼干
孩子的需求因子更小则其更容易被满足，故优先从需求因子小的孩子尝试
用某个饼干，满足一个较大需求因子的孩子，或满足一个较小需求因子的孩子，效果是一样的(最终满足的总量不变)

算法思路
对需求因子数组g与饼干大小数组s进行从小到大的排序
按照从小到大的顺序使用各饼干尝试是否可满足某个孩子，每个饼干只尝试1次
若尝试成功，则换下一个孩子尝试
直到发现没更多的孩子或者没更多的饼干，循环结束
时间复杂度：O(NlogN),空间复杂度:O(1)
*/
func findContentChildren(g []int, s []int) int {
	sort.Ints(g)
	sort.Ints(s)
	i, j := 0, 0
	for i < len(g) && j < len(s) {
		//胃口比饼干小，匹配成功
		if g[i] <= s[j] {
			i++
		}
		j++
	}
	return i
}

